akka {
  loglevel = "INFO"
  log-dead-letters = 100
  log-dead-letters-during-shutdown = on
  log-config-on-start = off
  actor {
    debug {
      # enable function of LoggingReceive, which is to log any received message at
      # DEBUG level
      autoreceive = on
      lifecycle = on
      unhandled = on
    }
  }

  remote {
    # If this is "on", Akka will log all outbound messages at DEBUG level,
    # if off then they are not logged
    log-sent-messages = on
  }

  http {
    host-connection-pool {
      max-connections = 8
      client {
        idle-timeout=5min
      }
    }
  }

  scheduler {
    tick-duration = 1ms
  }
}

kamon {
  metric {
    tick-interval = 1 second
  }

  statsd {
    # Hostname and port in which your StatsD is running. Remember that StatsD packets are sent using UDP and
    # setting unreachable hosts and/or not open ports wont be warned by the Kamon, your data wont go anywhere.
    hostname = "127.0.0.1"
    port = 8125

    # Interval between metrics data flushes to StatsD. It's value must be equal or greater than the
    # kamon.metrics.tick-interval setting.
    flush-interval = 1 second

    # Max packet size for UDP metrics data sent to StatsD.
    max-packet-size = 1024 bytes

    # Subscription patterns used to select which metrics will be pushed to StatsD. Note that first, metrics
    # collection for your desired entities must be activated under the kamon.metrics.filters settings.
    includes {
      actor = ["*"]
      trace = ["*"]
      dispatcher = ["*"]
    }

    simple-metric-key-generator {
      # Application prefix for all metrics pushed to StatsD. The default namespacing scheme for metrics follows
      # this pattern:
      #    application.host.entity.entity-name.metric-name
      application = "local-server"
    }
  }
}